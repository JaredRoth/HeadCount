require_relative 'test_helper'
require_relative '../lib/statewide_test'

class StatewideTestTest < Minitest::Test
  def setup
    @st = StatewideTest.new({:name => "ACADEMY 20",
      :third_grade => {"Math"=>{"2008"=>0.857, "2009"=>0.824, "2010"=>0.849, "2011"=>0.819, "2012"=>0.83, "2013"=>0.8554, "2014"=>0.8345},
                    "Reading"=>{"2008"=>0.866, "2009"=>0.862, "2010"=>0.864, "2011"=>0.867, "2012"=>0.87, "2013"=>0.85923, "2014"=>0.83101},
                    "Writing"=>{"2008"=>0.671, "2009"=>0.706, "2010"=>0.662, "2011"=>0.678, "2012"=>0.65517, "2014"=>0.63942, "2013"=>0.6687}
                    }})
    @st.class_data[:eighth_grade] =    {"Math"=>{"2008"=>0.64, "2009"=>0.656, "2010"=>0.672, "2011"=>0.65339, "2012"=>0.68197, "2013"=>0.6613, "2014"=>0.68496},
                                     "Reading"=>{"2008"=>0.843, "2009"=>0.825, "2010"=>0.863, "2011"=>0.83221, "2012"=>0.83352, "2013"=>0.85286, "2014"=>0.827},
                                     "Writing"=>{"2008"=>0.734, "2009"=>0.701, "2010"=>0.754, "2011"=>0.74579, "2012"=>0.73839, "2013"=>0.75069, "2014"=>0.74789}}

    @st.class_data[:math] =    {"All Students"=>{"2011"=>0.68, "2012"=>0.6894, "2013"=>0.69683, "2014"=>0.69944},
                                       "Asian"=>{"2011"=>0.8169, "2012"=>0.8182, "2013"=>0.8053, "2014"=>0.8},
                                       "Black"=>{"2011"=>0.4246, "2012"=>0.4248, "2013"=>0.4404, "2014"=>0.4205},
                   "Hawaiian/Pacific Islander"=>{"2011"=>0.5686, "2012"=>0.5714, "2013"=>0.6833, "2014"=>0.6818},
                                    "Hispanic"=>{"2011"=>0.5681, "2012"=>0.5722, "2013"=>0.5883, "2014"=>0.6048},
                             "Native American"=>{"2011"=>0.6143, "2012"=>0.5714, "2013"=>0.5932, "2014"=>0.5439},
                                 "Two or more"=>{"2011"=>0.6772, "2012"=>0.6899, "2013"=>0.6967, "2014"=>0.6932},
                                       "White"=>{"2011"=>0.7065, "2012"=>0.7135, "2013"=>0.7208, "2014"=>0.723}}

    @st.class_data[:reading] = {"All Students"=>{"2011"=>0.83, "2012"=>0.84585, "2013"=>0.84505, "2014"=>0.84127},
                                       "Asian"=>{"2011"=>0.8976, "2012"=>0.89328, "2013"=>0.90193, "2014"=>0.85531},
                                       "Black"=>{"2011"=>0.662, "2012"=>0.69469, "2013"=>0.66951, "2014"=>0.70387},
                   "Hawaiian/Pacific Islander"=>{"2011"=>0.7451, "2012"=>0.83333, "2013"=>0.86667, "2014"=>0.93182},
                                    "Hispanic"=>{"2011"=>0.7486, "2012"=>0.77167, "2013"=>0.77278, "2014"=>0.00778},
                             "Native American"=>{"2011"=>0.8169, "2012"=>0.78571, "2013"=>0.81356, "2014"=>0.00724},                                   "Two or more"=>{"2011"=>0.8419, "2012"=>0.84584, "2013"=>0.85582, "2014"=>0.00859},
                                       "White"=>{"2011"=>0.8513, "2012"=>0.86189, "2013"=>0.86083, "2014"=>0.00856}}

    @st.class_data[:writing] = {"All Students"=>{"2011"=>0.7192, "2012"=>0.70593, "2013"=>0.72029, "2014"=>0.71583},
                                       "Asian"=>{"2011"=>0.8268, "2012"=>0.8083, "2013"=>0.8109, "2014"=>0.7894},
                                       "Black"=>{"2011"=>0.5152, "2012"=>0.5044, "2013"=>0.4819, "2014"=>0.5194},
                   "Hawaiian/Pacific Islander"=>{"2011"=>0.7255, "2012"=>0.6833, "2013"=>0.7167, "2014"=>0.7273},
                                    "Hispanic"=>{"2011"=>0.6068, "2012"=>0.5978, "2013"=>0.623, "2014"=>0.6244},
                             "Native American"=>{"2011"=>0.6, "2012"=>0.5893, "2013"=>0.6102, "2014"=>0.6207},
                                 "Two or more"=>{"2011"=>0.7274, "2012"=>0.7186, "2013"=>0.7474, "2014"=>0.7317},
                                       "White"=>{"2011"=>0.7401, "2012"=>0.7262, "2013"=>0.7406, "2014"=>0.7348}}
  end

  def test_truncates_to_3_digits
    result = @st.truncate(0.3847528305)

    assert_equal 0.384, result
  end

  def test_truncates_hash
    result = @st.truncate_percentages({2010 => 0.391143, 2011 => 0.353234, 2012 => 0.267234})
    nk = {2010 => 0.391, 2011 => 0.353, 2012 => 0.267}

    assert_equal nk, result
  end

  def test_enrollment_provides_name_for_district
    assert_equal "ACADEMY 20", @st.name
  end
end
